"""
    Sat4Envi backend API

    The API documentation of the backend.  Access to definition group `public` is unrestricted. To access group `provider` you need extra permissions and group `private` isn't made available publicly.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.search_response import SearchResponse


class SearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_count(
            self,
            UNKNOWN_PARAMETER_NAME6,
            **kwargs
        ):
            """Get count of total scene results  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_count(UNKNOWN_PARAMETER_NAME6, async_req=True)
            >>> result = thread.get()

            Args:
                UNKNOWN_PARAMETER_NAME6 ():

            Keyword Args:
                UNKNOWN_PARAMETER_NAME (): [optional]
                UNKNOWN_PARAMETER_NAME2 (): [optional]
                UNKNOWN_PARAMETER_NAME3 (): [optional]
                UNKNOWN_PARAMETER_NAME4 (): [optional]
                UNKNOWN_PARAMETER_NAME5 (): [optional]
                UNKNOWN_PARAMETER_NAME7 (): [optional]
                UNKNOWN_PARAMETER_NAME8 (): [optional]
                UNKNOWN_PARAMETER_NAME9 (): [optional]
                UNKNOWN_PARAMETER_NAME10 (): [optional]
                UNKNOWN_PARAMETER_NAME11 (): [optional]
                UNKNOWN_PARAMETER_NAME12 (): [optional]
                UNKNOWN_PARAMETER_NAME13 (): [optional]
                UNKNOWN_PARAMETER_NAME14 (): [optional]
                UNKNOWN_PARAMETER_NAME15 (): [optional]
                UNKNOWN_PARAMETER_NAME16 (): [optional]
                UNKNOWN_PARAMETER_NAME17 (): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                int
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['UNKNOWN_PARAMETER_NAME6'] = \
                UNKNOWN_PARAMETER_NAME6
            return self.call_with_http_info(**kwargs)

        self.get_count = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'bearer-token'
                ],
                'endpoint_path': '/api/v1/search/count',
                'operation_id': 'get_count',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'UNKNOWN_PARAMETER_NAME6',
                    'UNKNOWN_PARAMETER_NAME',
                    'UNKNOWN_PARAMETER_NAME2',
                    'UNKNOWN_PARAMETER_NAME3',
                    'UNKNOWN_PARAMETER_NAME4',
                    'UNKNOWN_PARAMETER_NAME5',
                    'UNKNOWN_PARAMETER_NAME7',
                    'UNKNOWN_PARAMETER_NAME8',
                    'UNKNOWN_PARAMETER_NAME9',
                    'UNKNOWN_PARAMETER_NAME10',
                    'UNKNOWN_PARAMETER_NAME11',
                    'UNKNOWN_PARAMETER_NAME12',
                    'UNKNOWN_PARAMETER_NAME13',
                    'UNKNOWN_PARAMETER_NAME14',
                    'UNKNOWN_PARAMETER_NAME15',
                    'UNKNOWN_PARAMETER_NAME16',
                    'UNKNOWN_PARAMETER_NAME17',
                ],
                'required': [
                    'UNKNOWN_PARAMETER_NAME6',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'UNKNOWN_PARAMETER_NAME6':
                        (,),
                    'UNKNOWN_PARAMETER_NAME':
                        (,),
                    'UNKNOWN_PARAMETER_NAME2':
                        (,),
                    'UNKNOWN_PARAMETER_NAME3':
                        (,),
                    'UNKNOWN_PARAMETER_NAME4':
                        (,),
                    'UNKNOWN_PARAMETER_NAME5':
                        (,),
                    'UNKNOWN_PARAMETER_NAME7':
                        (,),
                    'UNKNOWN_PARAMETER_NAME8':
                        (,),
                    'UNKNOWN_PARAMETER_NAME9':
                        (,),
                    'UNKNOWN_PARAMETER_NAME10':
                        (,),
                    'UNKNOWN_PARAMETER_NAME11':
                        (,),
                    'UNKNOWN_PARAMETER_NAME12':
                        (,),
                    'UNKNOWN_PARAMETER_NAME13':
                        (,),
                    'UNKNOWN_PARAMETER_NAME14':
                        (,),
                    'UNKNOWN_PARAMETER_NAME15':
                        (,),
                    'UNKNOWN_PARAMETER_NAME16':
                        (,),
                    'UNKNOWN_PARAMETER_NAME17':
                        (,),
                },
                'attribute_map': {
                    'UNKNOWN_PARAMETER_NAME6': 'productType',
                    'UNKNOWN_PARAMETER_NAME': 'sensingFrom',
                    'UNKNOWN_PARAMETER_NAME2': 'sensingTo',
                    'UNKNOWN_PARAMETER_NAME3': 'ingestionFrom',
                    'UNKNOWN_PARAMETER_NAME4': 'ingestionTo',
                    'UNKNOWN_PARAMETER_NAME5': 'satellitePlatform',
                    'UNKNOWN_PARAMETER_NAME7': 'processingLevel',
                    'UNKNOWN_PARAMETER_NAME8': 'polarisation',
                    'UNKNOWN_PARAMETER_NAME9': 'sensorMode',
                    'UNKNOWN_PARAMETER_NAME10': 'relativeOrbitNumber',
                    'UNKNOWN_PARAMETER_NAME11': 'absoluteOrbitNumber',
                    'UNKNOWN_PARAMETER_NAME12': 'collection',
                    'UNKNOWN_PARAMETER_NAME13': 'timeliness',
                    'UNKNOWN_PARAMETER_NAME14': 'instrument',
                    'UNKNOWN_PARAMETER_NAME15': 'footprint',
                    'UNKNOWN_PARAMETER_NAME16': 'productLevel',
                    'UNKNOWN_PARAMETER_NAME17': 'cloudCover',
                },
                'location_map': {
                    'UNKNOWN_PARAMETER_NAME6': 'query',
                    'UNKNOWN_PARAMETER_NAME': 'query',
                    'UNKNOWN_PARAMETER_NAME2': 'query',
                    'UNKNOWN_PARAMETER_NAME3': 'query',
                    'UNKNOWN_PARAMETER_NAME4': 'query',
                    'UNKNOWN_PARAMETER_NAME5': 'query',
                    'UNKNOWN_PARAMETER_NAME7': 'query',
                    'UNKNOWN_PARAMETER_NAME8': 'query',
                    'UNKNOWN_PARAMETER_NAME9': 'query',
                    'UNKNOWN_PARAMETER_NAME10': 'query',
                    'UNKNOWN_PARAMETER_NAME11': 'query',
                    'UNKNOWN_PARAMETER_NAME12': 'query',
                    'UNKNOWN_PARAMETER_NAME13': 'query',
                    'UNKNOWN_PARAMETER_NAME14': 'query',
                    'UNKNOWN_PARAMETER_NAME15': 'query',
                    'UNKNOWN_PARAMETER_NAME16': 'query',
                    'UNKNOWN_PARAMETER_NAME17': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_count
        )

        def __get_scenes(
            self,
            UNKNOWN_PARAMETER_NAME6,
            **kwargs
        ):
            """Search for scenes  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_scenes(UNKNOWN_PARAMETER_NAME6, async_req=True)
            >>> result = thread.get()

            Args:
                UNKNOWN_PARAMETER_NAME6 ():

            Keyword Args:
                UNKNOWN_PARAMETER_NAME (): [optional]
                UNKNOWN_PARAMETER_NAME2 (): [optional]
                UNKNOWN_PARAMETER_NAME3 (): [optional]
                UNKNOWN_PARAMETER_NAME4 (): [optional]
                UNKNOWN_PARAMETER_NAME5 (): [optional]
                UNKNOWN_PARAMETER_NAME7 (): [optional]
                UNKNOWN_PARAMETER_NAME8 (): [optional]
                UNKNOWN_PARAMETER_NAME9 (): [optional]
                UNKNOWN_PARAMETER_NAME10 (): [optional]
                UNKNOWN_PARAMETER_NAME11 (): [optional]
                UNKNOWN_PARAMETER_NAME12 (): [optional]
                UNKNOWN_PARAMETER_NAME13 (): [optional]
                UNKNOWN_PARAMETER_NAME14 (): [optional]
                UNKNOWN_PARAMETER_NAME15 (): [optional]
                UNKNOWN_PARAMETER_NAME16 (): [optional]
                UNKNOWN_PARAMETER_NAME17 (): [optional]
                UNKNOWN_PARAMETER_NAME18 (): [optional]
                UNKNOWN_PARAMETER_NAME19 (): [optional]
                UNKNOWN_PARAMETER_NAME20 (): [optional]
                UNKNOWN_PARAMETER_NAME21 (): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchResponse]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['UNKNOWN_PARAMETER_NAME6'] = \
                UNKNOWN_PARAMETER_NAME6
            return self.call_with_http_info(**kwargs)

        self.get_scenes = _Endpoint(
            settings={
                'response_type': ([SearchResponse],),
                'auth': [
                    'bearer-token'
                ],
                'endpoint_path': '/api/v1/search',
                'operation_id': 'get_scenes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'UNKNOWN_PARAMETER_NAME6',
                    'UNKNOWN_PARAMETER_NAME',
                    'UNKNOWN_PARAMETER_NAME2',
                    'UNKNOWN_PARAMETER_NAME3',
                    'UNKNOWN_PARAMETER_NAME4',
                    'UNKNOWN_PARAMETER_NAME5',
                    'UNKNOWN_PARAMETER_NAME7',
                    'UNKNOWN_PARAMETER_NAME8',
                    'UNKNOWN_PARAMETER_NAME9',
                    'UNKNOWN_PARAMETER_NAME10',
                    'UNKNOWN_PARAMETER_NAME11',
                    'UNKNOWN_PARAMETER_NAME12',
                    'UNKNOWN_PARAMETER_NAME13',
                    'UNKNOWN_PARAMETER_NAME14',
                    'UNKNOWN_PARAMETER_NAME15',
                    'UNKNOWN_PARAMETER_NAME16',
                    'UNKNOWN_PARAMETER_NAME17',
                    'UNKNOWN_PARAMETER_NAME18',
                    'UNKNOWN_PARAMETER_NAME19',
                    'UNKNOWN_PARAMETER_NAME20',
                    'UNKNOWN_PARAMETER_NAME21',
                ],
                'required': [
                    'UNKNOWN_PARAMETER_NAME6',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'UNKNOWN_PARAMETER_NAME6':
                        (,),
                    'UNKNOWN_PARAMETER_NAME':
                        (,),
                    'UNKNOWN_PARAMETER_NAME2':
                        (,),
                    'UNKNOWN_PARAMETER_NAME3':
                        (,),
                    'UNKNOWN_PARAMETER_NAME4':
                        (,),
                    'UNKNOWN_PARAMETER_NAME5':
                        (,),
                    'UNKNOWN_PARAMETER_NAME7':
                        (,),
                    'UNKNOWN_PARAMETER_NAME8':
                        (,),
                    'UNKNOWN_PARAMETER_NAME9':
                        (,),
                    'UNKNOWN_PARAMETER_NAME10':
                        (,),
                    'UNKNOWN_PARAMETER_NAME11':
                        (,),
                    'UNKNOWN_PARAMETER_NAME12':
                        (,),
                    'UNKNOWN_PARAMETER_NAME13':
                        (,),
                    'UNKNOWN_PARAMETER_NAME14':
                        (,),
                    'UNKNOWN_PARAMETER_NAME15':
                        (,),
                    'UNKNOWN_PARAMETER_NAME16':
                        (,),
                    'UNKNOWN_PARAMETER_NAME17':
                        (,),
                    'UNKNOWN_PARAMETER_NAME18':
                        (,),
                    'UNKNOWN_PARAMETER_NAME19':
                        (,),
                    'UNKNOWN_PARAMETER_NAME20':
                        (,),
                    'UNKNOWN_PARAMETER_NAME21':
                        (,),
                },
                'attribute_map': {
                    'UNKNOWN_PARAMETER_NAME6': 'productType',
                    'UNKNOWN_PARAMETER_NAME': 'sensingFrom',
                    'UNKNOWN_PARAMETER_NAME2': 'sensingTo',
                    'UNKNOWN_PARAMETER_NAME3': 'ingestionFrom',
                    'UNKNOWN_PARAMETER_NAME4': 'ingestionTo',
                    'UNKNOWN_PARAMETER_NAME5': 'satellitePlatform',
                    'UNKNOWN_PARAMETER_NAME7': 'processingLevel',
                    'UNKNOWN_PARAMETER_NAME8': 'polarisation',
                    'UNKNOWN_PARAMETER_NAME9': 'sensorMode',
                    'UNKNOWN_PARAMETER_NAME10': 'relativeOrbitNumber',
                    'UNKNOWN_PARAMETER_NAME11': 'absoluteOrbitNumber',
                    'UNKNOWN_PARAMETER_NAME12': 'collection',
                    'UNKNOWN_PARAMETER_NAME13': 'timeliness',
                    'UNKNOWN_PARAMETER_NAME14': 'instrument',
                    'UNKNOWN_PARAMETER_NAME15': 'footprint',
                    'UNKNOWN_PARAMETER_NAME16': 'productLevel',
                    'UNKNOWN_PARAMETER_NAME17': 'cloudCover',
                    'UNKNOWN_PARAMETER_NAME18': 'sortBy',
                    'UNKNOWN_PARAMETER_NAME19': 'order',
                    'UNKNOWN_PARAMETER_NAME20': 'limit',
                    'UNKNOWN_PARAMETER_NAME21': 'offset',
                },
                'location_map': {
                    'UNKNOWN_PARAMETER_NAME6': 'query',
                    'UNKNOWN_PARAMETER_NAME': 'query',
                    'UNKNOWN_PARAMETER_NAME2': 'query',
                    'UNKNOWN_PARAMETER_NAME3': 'query',
                    'UNKNOWN_PARAMETER_NAME4': 'query',
                    'UNKNOWN_PARAMETER_NAME5': 'query',
                    'UNKNOWN_PARAMETER_NAME7': 'query',
                    'UNKNOWN_PARAMETER_NAME8': 'query',
                    'UNKNOWN_PARAMETER_NAME9': 'query',
                    'UNKNOWN_PARAMETER_NAME10': 'query',
                    'UNKNOWN_PARAMETER_NAME11': 'query',
                    'UNKNOWN_PARAMETER_NAME12': 'query',
                    'UNKNOWN_PARAMETER_NAME13': 'query',
                    'UNKNOWN_PARAMETER_NAME14': 'query',
                    'UNKNOWN_PARAMETER_NAME15': 'query',
                    'UNKNOWN_PARAMETER_NAME16': 'query',
                    'UNKNOWN_PARAMETER_NAME17': 'query',
                    'UNKNOWN_PARAMETER_NAME18': 'query',
                    'UNKNOWN_PARAMETER_NAME19': 'query',
                    'UNKNOWN_PARAMETER_NAME20': 'query',
                    'UNKNOWN_PARAMETER_NAME21': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_scenes
        )
